name: Deploy to Production

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version:
        description: 'Version to deploy'
        required: true
        default: 'latest'

env:
  PYTHON_VERSION: '3.9'

jobs:
  validate-tag:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: Get version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Deploying version: $VERSION"

  build-for-deployment:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [validate-tag]
    if: always() && (needs.validate-tag.result == 'success' || github.event_name == 'workflow_dispatch')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build pytest
        pip install -r requirements.txt || echo "No requirements.txt found"
    
    - name: Run tests before deployment
      run: |
        pytest test_calculator.py::TestCalculator test_calculator.py::TestMathFunctions -v
    
    - name: Build application
      run: |
        python -m build
        echo "Build completed successfully"
    
    - name: Create deployment package
      run: |
        mkdir -p deployment-package
        cp -r dist/* deployment-package/
        cp calculator.py deployment-package/
        tar -czf deployment-package.tar.gz deployment-package/
    
    - name: Upload deployment artifact
      uses: actions/upload-artifact@v3
      with:
        name: deployment-package
        path: deployment-package.tar.gz

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-for-deployment]
    environment: staging
    if: github.event.inputs.environment == 'staging' || (startsWith(github.ref, 'refs/tags/') && contains(github.ref, 'rc'))
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v3
      with:
        name: deployment-package
    
    - name: Simulate staging deployment
      run: |
        echo "Deploying to staging environment..."
        sleep 10
        echo "Staging deployment completed!"
        echo "Application available at: https://staging.example.com"
    
    - name: Run staging smoke tests
      run: |
        echo "Running smoke tests on staging..."
        sleep 5
        echo "Smoke tests passed!"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-for-deployment, deploy-staging]
    environment: production
    if: github.event.inputs.environment == 'production' || (startsWith(github.ref, 'refs/tags/') && !contains(github.ref, 'rc'))
    
    steps:
    - name: Download deployment package
      uses: actions/download-artifact@v3
      with:
        name: deployment-package
    
    - name: Simulate production deployment
      run: |
        echo "Deploying to production environment..."
        sleep 15
        echo "Production deployment completed!"
        echo "Application available at: https://app.example.com"
    
    - name: Run production smoke tests
      run: |
        echo "Running smoke tests on production..."
        sleep 5
        echo "Production smoke tests passed!"
    
    - name: Notify deployment completion
      run: |
        echo "üöÄ Production deployment successful!"
        echo "Version: ${{ needs.validate-tag.outputs.version || github.event.inputs.version }}"
        echo "Environment: production"

  rollback:
    name: Rollback Capability
    runs-on: ubuntu-latest
    if: failure() && (needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure')
    needs: [deploy-staging, deploy-production]
    
    steps:
    - name: Rollback deployment
      run: |
        echo "‚ùå Deployment failed, initiating rollback..."
        sleep 5
        echo "‚úÖ Rollback completed successfully"